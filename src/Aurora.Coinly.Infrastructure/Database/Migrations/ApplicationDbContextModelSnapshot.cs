// <auto-generated />
using System;
using Aurora.Coinly.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Aurora.Coinly.Infrastructure.Database.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("coinly")
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Aurora.Coinly.Domain.Budgets.Budget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("frequency");

                    b.Property<DateTime?>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on_utc");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Id")
                        .HasName("pk_budgets");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_budgets_category_id");

                    b.ToTable("budgets", "coinly");
                });

            modelBuilder.Entity("Aurora.Coinly.Domain.Budgets.BudgetPeriod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BudgetId")
                        .HasColumnType("uuid")
                        .HasColumnName("budget_id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<DateTime?>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on_utc");

                    b.HasKey("Id")
                        .HasName("pk_budget_periods");

                    b.HasIndex("BudgetId")
                        .HasDatabaseName("ix_budget_periods_budget_id");

                    b.ToTable("budget_periods", "coinly");
                });

            modelBuilder.Entity("Aurora.Coinly.Domain.Budgets.BudgetTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BudgetPeriodId")
                        .HasColumnType("uuid")
                        .HasColumnName("budget_period_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.Property<DateOnly>("TransactionDate")
                        .HasColumnType("date")
                        .HasColumnName("transaction_date");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uuid")
                        .HasColumnName("transaction_id");

                    b.HasKey("Id")
                        .HasName("pk_budget_transactions");

                    b.HasIndex("BudgetPeriodId")
                        .HasDatabaseName("ix_budget_transactions_budget_period_id");

                    b.ToTable("budget_transactions", "coinly");
                });

            modelBuilder.Entity("Aurora.Coinly.Domain.Categories.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on_utc");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("group");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("MaxDaysToReverse")
                        .HasColumnType("integer")
                        .HasColumnName("max_days_to_reverse");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("notes");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on_utc");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("categories", "coinly");
                });

            modelBuilder.Entity("Aurora.Coinly.Domain.Methods.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("AllowRecurring")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_recurring");

                    b.Property<bool>("AutoMarkAsPaid")
                        .HasColumnType("boolean")
                        .HasColumnName("auto_mark_as_paid");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on_utc");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("MaxDaysToReverse")
                        .HasColumnType("integer")
                        .HasColumnName("max_days_to_reverse");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("notes");

                    b.Property<int?>("StatementCutoffDay")
                        .HasColumnType("integer")
                        .HasColumnName("statement_cutoff_day");

                    b.Property<int?>("SuggestedPaymentDay")
                        .HasColumnType("integer")
                        .HasColumnName("suggested_payment_day");

                    b.Property<DateTime?>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on_utc");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uuid")
                        .HasColumnName("wallet_id");

                    b.HasKey("Id")
                        .HasName("pk_payment_methods");

                    b.HasIndex("WalletId")
                        .HasDatabaseName("ix_payment_methods_wallet_id");

                    b.ToTable("payment_methods", "coinly");
                });

            modelBuilder.Entity("Aurora.Coinly.Domain.Summary.MonthlySummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("currency_code");

                    b.Property<int>("Month")
                        .HasColumnType("integer")
                        .HasColumnName("month");

                    b.Property<decimal>("Savings")
                        .HasColumnType("numeric(9, 2)")
                        .HasColumnName("savings");

                    b.Property<decimal>("TotalExpense")
                        .HasColumnType("numeric(9, 2)")
                        .HasColumnName("total_expense");

                    b.Property<decimal>("TotalIncome")
                        .HasColumnType("numeric(9, 2)")
                        .HasColumnName("total_income");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Id")
                        .HasName("pk_monthly_summaries");

                    b.ToTable("monthly_summaries", "coinly");
                });

            modelBuilder.Entity("Aurora.Coinly.Domain.Transactions.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.Property<int>("InstallmentNumber")
                        .HasColumnType("integer")
                        .HasColumnName("installment_number");

                    b.Property<DateOnly>("MaxPaymentDate")
                        .HasColumnType("date")
                        .HasColumnName("max_payment_date");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("notes");

                    b.Property<DateTime?>("PaidOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("paid_on_utc");

                    b.Property<DateOnly?>("PaymentDate")
                        .HasColumnType("date")
                        .HasColumnName("payment_date");

                    b.Property<Guid?>("PaymentMethodId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_method_id");

                    b.Property<DateTime?>("RemovedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("removed_on_utc");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("status");

                    b.Property<DateOnly>("TransactionDate")
                        .HasColumnType("date")
                        .HasColumnName("transaction_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid?>("WalletId")
                        .HasColumnType("uuid")
                        .HasColumnName("wallet_id");

                    b.HasKey("Id")
                        .HasName("pk_transactions");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_transactions_category_id");

                    b.HasIndex("PaymentMethodId")
                        .HasDatabaseName("ix_transactions_payment_method_id");

                    b.HasIndex("WalletId")
                        .HasDatabaseName("ix_transactions_wallet_id");

                    b.ToTable("transactions", "coinly");
                });

            modelBuilder.Entity("Aurora.Coinly.Domain.Users.Role", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Name")
                        .HasName("pk_roles");

                    b.ToTable("roles", "coinly");

                    b.HasData(
                        new
                        {
                            Name = "Member"
                        },
                        new
                        {
                            Name = "Administrator"
                        });
                });

            modelBuilder.Entity("Aurora.Coinly.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("IdentityId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("identity_id");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<DateTime?>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on_utc");

                    b.Property<string>("_passwordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("password_hash");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("IdentityId")
                        .IsUnique()
                        .HasDatabaseName("ix_users_identity_id");

                    b.ToTable("users", "coinly");
                });

            modelBuilder.Entity("Aurora.Coinly.Domain.Users.UserToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("access_token");

                    b.Property<DateTime>("AccessTokenExpiresOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("access_token_expires_on_utc");

                    b.Property<DateTime>("IssuedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("issued_on_utc");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime>("RefreshTokenExpiresOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("refresh_token_expires_on_utc");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_tokens");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_tokens_user_id");

                    b.ToTable("user_tokens", "coinly");
                });

            modelBuilder.Entity("Aurora.Coinly.Domain.Wallets.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("AllowNegative")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_negative");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on_utc");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateOnly>("LastOperationOn")
                        .HasColumnType("date")
                        .HasColumnName("last_operation_on");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("notes");

                    b.Property<DateOnly>("OpenedOn")
                        .HasColumnType("date")
                        .HasColumnName("opened_on");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_on_utc");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_wallets");

                    b.ToTable("wallets", "coinly");
                });

            modelBuilder.Entity("Aurora.Coinly.Domain.Wallets.WalletHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.Property<Guid?>("TransactionId")
                        .HasColumnType("uuid")
                        .HasColumnName("transaction_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("type");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uuid")
                        .HasColumnName("wallet_id");

                    b.HasKey("Id")
                        .HasName("pk_wallet_history");

                    b.HasIndex("WalletId")
                        .HasDatabaseName("ix_wallet_history_wallet_id");

                    b.ToTable("wallet_history", "coinly");
                });

            modelBuilder.Entity("Aurora.Coinly.Infrastructure.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("outbox_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)")
                        .HasColumnName("content");

                    b.Property<string>("Error")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)")
                        .HasColumnName("error");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_processed");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on_utc");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_on_utc");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_outbox_messages");

                    b.ToTable("outbox_messages", "coinly");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<string>("RolesName")
                        .HasColumnType("character varying(50)")
                        .HasColumnName("role_name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("RolesName", "UserId")
                        .HasName("pk_user_roles");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_roles_user_id");

                    b.ToTable("user_roles", "coinly");
                });

            modelBuilder.Entity("Aurora.Coinly.Domain.Budgets.Budget", b =>
                {
                    b.HasOne("Aurora.Coinly.Domain.Categories.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_budgets_categories_category_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Aurora.Coinly.Domain.Budgets.BudgetPeriod", b =>
                {
                    b.HasOne("Aurora.Coinly.Domain.Budgets.Budget", null)
                        .WithMany("Periods")
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_budget_periods_budgets_budget_id");

                    b.OwnsOne("Aurora.Coinly.Domain.Shared.Money", "Limit", b1 =>
                        {
                            b1.Property<Guid>("BudgetPeriodId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric(9, 2)")
                                .HasColumnName("limit_amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("limit_currency");

                            b1.HasKey("BudgetPeriodId");

                            b1.ToTable("budget_periods", "coinly");

                            b1.WithOwner()
                                .HasForeignKey("BudgetPeriodId")
                                .HasConstraintName("fk_budget_periods_budget_periods_id");
                        });

                    b.OwnsOne("Aurora.Coinly.Domain.Shared.DateRange", "Period", b1 =>
                        {
                            b1.Property<Guid>("BudgetPeriodId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<DateOnly>("End")
                                .HasColumnType("date")
                                .HasColumnName("period_end");

                            b1.Property<DateOnly>("Start")
                                .HasColumnType("date")
                                .HasColumnName("period_start");

                            b1.HasKey("BudgetPeriodId");

                            b1.ToTable("budget_periods", "coinly");

                            b1.WithOwner()
                                .HasForeignKey("BudgetPeriodId")
                                .HasConstraintName("fk_budget_periods_budget_periods_id");
                        });

                    b.Navigation("Limit")
                        .IsRequired();

                    b.Navigation("Period")
                        .IsRequired();
                });

            modelBuilder.Entity("Aurora.Coinly.Domain.Budgets.BudgetTransaction", b =>
                {
                    b.HasOne("Aurora.Coinly.Domain.Budgets.BudgetPeriod", null)
                        .WithMany("Transactions")
                        .HasForeignKey("BudgetPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_budget_transactions_budget_periods_budget_period_id");

                    b.OwnsOne("Aurora.Coinly.Domain.Shared.Money", "Amount", b1 =>
                        {
                            b1.Property<Guid>("BudgetTransactionId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric(9, 2)")
                                .HasColumnName("amount_amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("amount_currency");

                            b1.HasKey("BudgetTransactionId");

                            b1.ToTable("budget_transactions", "coinly");

                            b1.WithOwner()
                                .HasForeignKey("BudgetTransactionId")
                                .HasConstraintName("fk_budget_transactions_budget_transactions_id");
                        });

                    b.Navigation("Amount")
                        .IsRequired();
                });

            modelBuilder.Entity("Aurora.Coinly.Domain.Categories.Category", b =>
                {
                    b.OwnsOne("Aurora.Coinly.Domain.Shared.Color", "Color", b1 =>
                        {
                            b1.Property<Guid>("CategoryId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(7)
                                .HasColumnType("character varying(7)")
                                .HasColumnName("color");

                            b1.HasKey("CategoryId");

                            b1.ToTable("categories", "coinly");

                            b1.WithOwner()
                                .HasForeignKey("CategoryId")
                                .HasConstraintName("fk_categories_categories_id");
                        });

                    b.Navigation("Color")
                        .IsRequired();
                });

            modelBuilder.Entity("Aurora.Coinly.Domain.Methods.PaymentMethod", b =>
                {
                    b.HasOne("Aurora.Coinly.Domain.Wallets.Wallet", "Wallet")
                        .WithMany("Methods")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_payment_methods_wallets_wallet_id");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Aurora.Coinly.Domain.Transactions.Transaction", b =>
                {
                    b.HasOne("Aurora.Coinly.Domain.Categories.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_transactions_categories_category_id");

                    b.HasOne("Aurora.Coinly.Domain.Methods.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .HasConstraintName("fk_transactions_payment_methods_payment_method_id");

                    b.HasOne("Aurora.Coinly.Domain.Wallets.Wallet", "Wallet")
                        .WithMany()
                        .HasForeignKey("WalletId")
                        .HasConstraintName("fk_transactions_wallets_wallet_id");

                    b.OwnsOne("Aurora.Coinly.Domain.Shared.Money", "Amount", b1 =>
                        {
                            b1.Property<Guid>("TransactionId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric(9, 2)")
                                .HasColumnName("amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("amount_currency");

                            b1.HasKey("TransactionId");

                            b1.ToTable("transactions", "coinly");

                            b1.WithOwner()
                                .HasForeignKey("TransactionId")
                                .HasConstraintName("fk_transactions_transactions_id");
                        });

                    b.Navigation("Amount")
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Aurora.Coinly.Domain.Users.UserToken", b =>
                {
                    b.HasOne("Aurora.Coinly.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_tokens_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Aurora.Coinly.Domain.Wallets.Wallet", b =>
                {
                    b.OwnsOne("Aurora.Coinly.Domain.Shared.Money", "AvailableAmount", b1 =>
                        {
                            b1.Property<Guid>("WalletId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric(9, 2)")
                                .HasColumnName("available_amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("available_amount_currency");

                            b1.HasKey("WalletId");

                            b1.ToTable("wallets", "coinly");

                            b1.WithOwner()
                                .HasForeignKey("WalletId")
                                .HasConstraintName("fk_wallets_wallets_id");
                        });

                    b.OwnsOne("Aurora.Coinly.Domain.Shared.Color", "Color", b1 =>
                        {
                            b1.Property<Guid>("WalletId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(7)
                                .HasColumnType("character varying(7)")
                                .HasColumnName("color");

                            b1.HasKey("WalletId");

                            b1.ToTable("wallets", "coinly");

                            b1.WithOwner()
                                .HasForeignKey("WalletId")
                                .HasConstraintName("fk_wallets_wallets_id");
                        });

                    b.OwnsOne("Aurora.Coinly.Domain.Shared.Money", "SavingsAmount", b1 =>
                        {
                            b1.Property<Guid>("WalletId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric(9, 2)")
                                .HasColumnName("savings_amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("savings_amount_currency");

                            b1.HasKey("WalletId");

                            b1.ToTable("wallets", "coinly");

                            b1.WithOwner()
                                .HasForeignKey("WalletId")
                                .HasConstraintName("fk_wallets_wallets_id");
                        });

                    b.Navigation("AvailableAmount")
                        .IsRequired();

                    b.Navigation("Color")
                        .IsRequired();

                    b.Navigation("SavingsAmount")
                        .IsRequired();
                });

            modelBuilder.Entity("Aurora.Coinly.Domain.Wallets.WalletHistory", b =>
                {
                    b.HasOne("Aurora.Coinly.Domain.Wallets.Wallet", null)
                        .WithMany("Operations")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_wallet_history_wallets_wallet_id");

                    b.OwnsOne("Aurora.Coinly.Domain.Shared.Money", "Amount", b1 =>
                        {
                            b1.Property<Guid>("WalletHistoryId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric(9, 2)")
                                .HasColumnName("amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("amount_currency");

                            b1.HasKey("WalletHistoryId");

                            b1.ToTable("wallet_history", "coinly");

                            b1.WithOwner()
                                .HasForeignKey("WalletHistoryId")
                                .HasConstraintName("fk_wallet_history_wallet_history_id");
                        });

                    b.OwnsOne("Aurora.Coinly.Domain.Shared.Money", "AvailableBalance", b1 =>
                        {
                            b1.Property<Guid>("WalletHistoryId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric(9, 2)")
                                .HasColumnName("available_balance_amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("available_balance_currency");

                            b1.HasKey("WalletHistoryId");

                            b1.ToTable("wallet_history", "coinly");

                            b1.WithOwner()
                                .HasForeignKey("WalletHistoryId")
                                .HasConstraintName("fk_wallet_history_wallet_history_id");
                        });

                    b.OwnsOne("Aurora.Coinly.Domain.Shared.Money", "SavingsBalance", b1 =>
                        {
                            b1.Property<Guid>("WalletHistoryId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric(9, 2)")
                                .HasColumnName("savings_balance_amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("savings_balance_currency");

                            b1.HasKey("WalletHistoryId");

                            b1.ToTable("wallet_history", "coinly");

                            b1.WithOwner()
                                .HasForeignKey("WalletHistoryId")
                                .HasConstraintName("fk_wallet_history_wallet_history_id");
                        });

                    b.Navigation("Amount")
                        .IsRequired();

                    b.Navigation("AvailableBalance")
                        .IsRequired();

                    b.Navigation("SavingsBalance")
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("Aurora.Coinly.Domain.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_roles_roles_name");

                    b.HasOne("Aurora.Coinly.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_users_user_id");
                });

            modelBuilder.Entity("Aurora.Coinly.Domain.Budgets.Budget", b =>
                {
                    b.Navigation("Periods");
                });

            modelBuilder.Entity("Aurora.Coinly.Domain.Budgets.BudgetPeriod", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Aurora.Coinly.Domain.Wallets.Wallet", b =>
                {
                    b.Navigation("Methods");

                    b.Navigation("Operations");
                });
#pragma warning restore 612, 618
        }
    }
}
